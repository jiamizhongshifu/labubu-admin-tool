//
//  StickerDetailView.swift
//  jitata
//
//  Created by ÈíüÂ∫ÜÊ†á on 2025/6/7.
//

import SwiftUI
import SwiftData

struct StickerDetailView: View {
    let sticker: ToySticker
    @Environment(\.modelContext) private var modelContext
    @Environment(\.presentationMode) var presentationMode
    @Query private var allStickers: [ToySticker]
    
    @State private var selectedStickerIndex: Int = 0
    @State private var showingEditSheet = false
    @State private var showingDeleteAlert = false
    @State private var showingSeriesView = false
    @State private var isRetryingEnhancement = false
    @State private var showingCustomPromptInput = false
    @State private var showingFullScreenImage = false
    @State private var showingFullScreen = false
    @State private var showingVideoDetail = false
    @State private var showingAIEnhancement = false
    @State private var showingAspectRatioSelection = false
    @State private var selectedAspectRatio = KlingConfig.defaultAspectRatio
    @State private var showingBackgroundRemoval = false
    @State private var showingLabubuRecognition = false
    @State private var labubuRecognitionResult: LabubuRecognitionResult?
    @StateObject private var labubuService = LabubuRecognitionService.shared
    
    // Ëé∑ÂèñÂΩìÂ§©Êî∂ÈõÜÁöÑË¥¥Á∫∏ÔºàÊúÄÊñ∞ÁöÑÂú®ÊúÄÂ∑¶ËæπÔºâ
    var todayStickers: [ToySticker] {
        let calendar = Calendar.current
        let stickers = allStickers.filter { otherSticker in
            calendar.isDate(otherSticker.createdDate, inSameDayAs: sticker.createdDate)
        }.sorted { $0.createdDate > $1.createdDate } // Êîπ‰∏∫ÈôçÂ∫èÊéíÂàóÔºåÊúÄÊñ∞ÁöÑÂú®Ââç
        
        return stickers
    }
    
    // ÂΩìÂâçÈÄâ‰∏≠ÁöÑË¥¥Á∫∏
    var currentSticker: ToySticker {
        return todayStickers.indices.contains(selectedStickerIndex) ? todayStickers[selectedStickerIndex] : sticker
    }
    
    var body: some View {
        ZStack {
            Color(.systemGroupedBackground)
                .ignoresSafeArea()
            
            VStack(spacing: 0) {
                // ÂΩìÂ§©Êî∂ÈõÜÁöÑÊΩÆÁé©Â∞èÂõæÊ®™ÂêëÊªöÂä®
                if todayStickers.count > 1 {
                    thumbnailScrollView
                }
                
                // ‰∏≠Èó¥Âå∫Âüü - Â§ßÂõæÂ±ïÁ§∫ÂíåÂ∑¶Âè≥ÊªëÂä®
                mainImageTabView
                
                // Â∫ïÈÉ®Âå∫Âüü - ÊΩÆÁé©‰ø°ÊÅØÂíåÊìç‰ΩúÊåâÈíÆ
                bottomContentView
            }
            
            Spacer()
        }
        .navigationTitle("")
        .navigationBarTitleDisplayMode(.inline)
        .navigationBarBackButtonHidden(false)
        .toolbar {
            ToolbarItem(placement: .principal) {
                VStack(spacing: 2) {
                    Text(formatDate(sticker.createdDate))
                        .font(.system(size: 18, weight: .bold))
                        .foregroundColor(.primary)
                    
                    Text("\(todayStickers.count)‰∏™ÊΩÆÁé©")
                        .font(.system(size: 14))
                        .foregroundColor(.secondary)
                }
            }
        }
        .onAppear {
            // ËÆæÁΩÆÂàùÂßãÈÄâ‰∏≠ÁöÑË¥¥Á∫∏Á¥¢Âºï
            if let index = todayStickers.firstIndex(where: { $0.id == sticker.id }) {
                selectedStickerIndex = index
            }
            
            // ‰ªéË¥¥Á∫∏ÂØπË±°‰∏≠ËØªÂèñÁî®Êà∑‰πãÂâçÈÄâÊã©ÁöÑÊØî‰æã
            selectedAspectRatio = currentSticker.preferredAspectRatio
            
            // üé¨ ÁõëÂê¨ËßÜÈ¢ëÈáçÊñ∞ÁîüÊàêÈÄöÁü•
            NotificationCenter.default.addObserver(
                forName: NSNotification.Name("VideoRegenerationRequested"),
                object: nil,
                queue: .main
            ) { notification in
                if let userInfo = notification.userInfo,
                   let stickerID = userInfo["stickerID"] as? String,
                   stickerID == currentSticker.id.uuidString {
                    // ÂΩìÂâçË¥¥Á∫∏ÁöÑËßÜÈ¢ëË¢´ÈáçÊñ∞ÁîüÊàêÔºåÂà∑Êñ∞ÁïåÈù¢
                    print("üîÑ Êî∂Âà∞ËßÜÈ¢ëÈáçÊñ∞ÁîüÊàêÈÄöÁü•ÔºåÂà∑Êñ∞ÁïåÈù¢")
                }
            }
        }
        .sheet(isPresented: $showingSeriesView) {
            SeriesInfoView(categoryName: currentSticker.categoryName)
        }
        .sheet(isPresented: $showingCustomPromptInput) {
            CustomPromptInputView(
                sticker: currentSticker,
                onEnhance: { prompt in
                    Task {
                        await enhanceWithAI(prompt: prompt, aspectRatio: selectedAspectRatio)
                    }
                }
            )
        }
        .sheet(isPresented: $showingAspectRatioSelection) {
            AspectRatioSelectionView(
                selectedAspectRatio: $selectedAspectRatio,
                onConfirm: {
                    // ‰øùÂ≠òÁî®Êà∑ÈÄâÊã©ÁöÑÊØî‰æãÂà∞Ë¥¥Á∫∏ÂØπË±°
                    currentSticker.preferredAspectRatio = selectedAspectRatio
                    showingCustomPromptInput = true
                }
            )
        }
        .fullScreenCover(isPresented: $showingFullScreenImage) {
            FullScreenImageView(sticker: currentSticker, isPresented: $showingFullScreenImage)
        }
        .sheet(isPresented: $showingLabubuRecognition) {
            if let result = labubuRecognitionResult {
                LabubuFamilyTreeView(recognitionResult: result)
            }
        }
    }
    
    // MARK: - ÁßÅÊúâÊñπÊ≥ï
    
    /// Ëß¶ÂèëAIÂ¢ûÂº∫
    private func triggerEnhancement(with prompt: String, using model: AIModel, aspectRatio: String = "1:1") {
        Task {
            isRetryingEnhancement = true
            
            // ËÆæÁΩÆÁä∂ÊÄÅ‰∏∫Â§ÑÁêÜ‰∏≠
            currentSticker.aiEnhancementStatus = .processing
            currentSticker.aiEnhancementMessage = "ÂáÜÂ§áÂ¢ûÂº∫..."
            currentSticker.aiEnhancementProgress = 0.0
            
            _ = await ImageEnhancementService.shared.enhanceImage(for: currentSticker, customPrompt: prompt, model: model, aspectRatio: aspectRatio)
            await MainActor.run {
                isRetryingEnhancement = false
            }
        }
    }
    
    /// Ëé∑ÂèñÂ¢ûÂº∫ÊåâÈíÆÊñáÂ≠ó
    private func getEnhancementButtonText() -> String {
        if isRetryingEnhancement {
            return "AIÂ¢ûÂº∫‰∏≠..."
        }
        
        switch currentSticker.aiEnhancementStatus {
        case .pending:
            return "AIÂ¢ûÂº∫"
        case .processing:
            return "Â¢ûÂº∫‰∏≠..."
        case .completed:
            return "ÈáçÊñ∞Â¢ûÂº∫"
        case .failed:
            return "ÈáçËØïÂ¢ûÂº∫"
        }
    }
    
    /// Ëé∑ÂèñÂ¢ûÂº∫ÊåâÈíÆÈ¢úËâ≤
    private func getEnhancementButtonColors() -> [Color] {
        switch currentSticker.aiEnhancementStatus {
        case .pending:
            return [Color.blue, Color.purple]
        case .processing:
            return [Color.gray, Color.gray.opacity(0.8)]
        case .completed:
            return [Color.green, Color.teal]
        case .failed:
            return [Color.orange, Color.red]
        }
    }
    
    // MARK: - Â≠êËßÜÂõæ
    
    private var thumbnailScrollView: some View {
        ScrollViewReader { proxy in
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 12) {
                    ForEach(Array(todayStickers.enumerated()), id: \.element.id) { index, daySticker in
                        ThumbnailView(
                            sticker: daySticker,
                            isSelected: index == selectedStickerIndex
                        )
                        .id(index)
                        .onTapGesture {
                            HapticFeedbackManager.shared.lightTap()
                            withAnimation(.easeInOut(duration: 0.3)) {
                                selectedStickerIndex = index
                            }
                        }
                    }
                }
                .padding(.horizontal, 20)
            }
            .padding(.top, 20)
            .padding(.bottom, 30)
            .onChange(of: selectedStickerIndex) { _, newIndex in
                withAnimation(.easeInOut(duration: 0.3)) {
                    proxy.scrollTo(newIndex, anchor: .center)
                }
            }
        }
    }
    
    private var mainImageTabView: some View {
        TabView(selection: $selectedStickerIndex) {
            ForEach(Array(todayStickers.enumerated()), id: \.element.id) { index, daySticker in
                LargeImageView(sticker: daySticker) {
                    showingFullScreenImage = true
                }
                .tag(index)
            }
        }
        .tabViewStyle(PageTabViewStyle(indexDisplayMode: .never))
        .frame(height: 350)
        .padding(.horizontal, 20)
        .padding(.bottom, 20)
    }
    
    private var bottomContentView: some View {
        VStack(spacing: 16) {
            stickerInfoView
            storageStatusView
            imageToggleButton
            actionButtonsView
        }
    }
    
    private var stickerInfoView: some View {
        VStack(spacing: 12) {
            HStack {
                Text(currentSticker.name)
                    .font(.title2)
                    .fontWeight(.bold)
                    .foregroundColor(.primary)
                
                AIEnhancementStatusIndicator(sticker: currentSticker)
            }
            
            HStack {
                HStack {
                    Image(systemName: "tag.fill")
                        .foregroundColor(.blue)
                    Text(currentSticker.categoryName)
                        .font(.subheadline)
                        .foregroundColor(.blue)
                }
                
                Spacer()
                
                Button(action: {
                    HapticFeedbackManager.shared.lightTap()
                    showingSeriesView = true
                }) {
                    HStack(spacing: 4) {
                        Image(systemName: "cube.box.fill")
                            .font(.system(size: 12))
                        Text("Êü•ÁúãÁ≥ªÂàó")
                            .font(.system(size: 12, weight: .medium))
                    }
                    .foregroundColor(.white)
                    .padding(.horizontal, 12)
                    .padding(.vertical, 6)
                    .background(
                        LinearGradient(
                            gradient: Gradient(colors: [Color.blue, Color.purple]),
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .cornerRadius(12)
                }
            }
            
            if !currentSticker.notes.isEmpty {
                Text(currentSticker.notes)
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .lineLimit(3)
            }
        }
        .padding(.horizontal, 20)
    }
    
    private var storageStatusView: some View {
        Group {
            if let storedURL = currentSticker.supabaseImageURL, !storedURL.isEmpty {
                HStack {
                    if storedURL.hasPrefix("file://") {
                        Image(systemName: "internaldrive.fill")
                            .foregroundColor(.blue)
                            .font(.system(size: 12))
                        Text("ÂõæÁâáÂ∑≤È¢ÑÂ≠òÂÇ®Âà∞Êú¨Âú∞")
                            .font(.system(size: 12, weight: .medium))
                            .foregroundColor(.secondary)
                    } else {
                        Image(systemName: "cloud.fill")
                            .foregroundColor(.green)
                            .font(.system(size: 12))
                        Text("ÂõæÁâáÂ∑≤È¢Ñ‰∏ä‰º†Âà∞‰∫ëÁ´Ø")
                            .font(.system(size: 12, weight: .medium))
                            .foregroundColor(.secondary)
                    }
                    Spacer()
                    Image(systemName: "checkmark.circle.fill")
                        .foregroundColor(storedURL.hasPrefix("file://") ? .blue : .green)
                        .font(.system(size: 12))
                }
                .padding(.horizontal, 20)
                .padding(.vertical, 4)
            }
        }
    }
    
    @ViewBuilder
    private var imageToggleButton: some View {
        if currentSticker.hasEnhancedImage {
            Button(action: {
                HapticFeedbackManager.shared.lightTap()
                withAnimation(.easeInOut(duration: 0.3)) {
                    currentSticker.toggleImageDisplay()
                }
            }) {
                HStack {
                    Image(systemName: currentSticker.isShowingEnhancedImage ? "photo" : "sparkles")
                        .font(.system(size: 14, weight: .medium))
                    Text("ÂΩìÂâçÊòæÁ§∫Ôºö\(currentSticker.currentImageTypeDescription)")
                        .font(.subheadline)
                        .fontWeight(.medium)
                    Image(systemName: "arrow.triangle.2.circlepath")
                        .font(.system(size: 12))
                }
                .foregroundColor(.blue)
                .padding(.horizontal, 16)
                .padding(.vertical, 10)
                .background(
                    RoundedRectangle(cornerRadius: 20)
                        .fill(Color.blue.opacity(0.1))
                        .overlay(
                            RoundedRectangle(cornerRadius: 20)
                                .stroke(Color.blue.opacity(0.3), lineWidth: 1)
                        )
                )
            }
            .transition(.opacity.combined(with: .scale))
            .padding(.horizontal, 20)
            .padding(.bottom, 8)
        }
    }
    
    private var actionButtonsView: some View {
        VStack(spacing: 12) {
            labubuRecognitionButtonView
            aiEnhancementButtonView
            aiEnhancementProgressView
            videoGenerationButtonView
            videoManagementView
        }
    }
    
    private var labubuRecognitionButtonView: some View {
        LabubuRecognitionButton(image: currentSticker.processedImage ?? UIImage()) { result in
            // ËØÜÂà´ÂÆåÊàêÂêéÁöÑÂõûË∞É
            labubuRecognitionResult = result
            showingLabubuRecognition = true
        }
        .padding(.horizontal, 20)
    }
    
    @ViewBuilder
    private var aiEnhancementButtonView: some View {
        if currentSticker.aiEnhancementStatus != .processing {
            Button(action: {
                HapticFeedbackManager.shared.lightTap()
                showingAspectRatioSelection = true
            }) {
                HStack {
                    if currentSticker.aiEnhancementStatus == .processing || isRetryingEnhancement {
                        ProgressView()
                            .scaleEffect(0.8)
                            .foregroundColor(.white)
                    } else {
                        Image(systemName: currentSticker.aiEnhancementStatus == .completed ? "sparkles" : "wand.and.stars")
                    }
                    Text(getEnhancementButtonText())
                }
                .font(.headline)
                .foregroundColor(.white)
                .frame(maxWidth: .infinity)
                .padding(.vertical, 12)
                .background(
                    LinearGradient(
                        gradient: Gradient(colors: getEnhancementButtonColors()),
                        startPoint: .leading,
                        endPoint: .trailing
                    )
                )
                .cornerRadius(12)
                .shadow(color: getEnhancementButtonColors()[0].opacity(0.3), radius: 6, x: 0, y: 3)
            }
            .disabled(currentSticker.aiEnhancementStatus == .processing || isRetryingEnhancement)
            .padding(.horizontal, 20)
        }
    }
    
    @ViewBuilder
    private var aiEnhancementProgressView: some View {
        if currentSticker.aiEnhancementStatus == .processing {
            VStack(spacing: 12) {
                VStack(spacing: 8) {
                    HStack {
                        Image(systemName: "brain.head.profile")
                            .font(.system(size: 16))
                            .foregroundColor(.blue)
                        
                        Text(currentSticker.aiEnhancementMessage)
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                        
                        Spacer()
                    }
                    
                    ProgressView(value: currentSticker.aiEnhancementProgress)
                        .progressViewStyle(LinearProgressViewStyle(tint: .blue))
                        .scaleEffect(y: 1.5)
                }
                .padding(.horizontal, 20)
                
                Button(action: {
                    HapticFeedbackManager.shared.lightTap()
                    cancelEnhancement()
                }) {
                    HStack {
                        Image(systemName: "xmark.circle.fill")
                        Text("ÂèñÊ∂àÂ¢ûÂº∫")
                    }
                    .font(.headline)
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 12)
                    .background(
                        LinearGradient(
                            gradient: Gradient(colors: [Color.red, Color.orange]),
                            startPoint: .leading,
                            endPoint: .trailing
                        )
                    )
                    .cornerRadius(12)
                    .shadow(color: Color.red.opacity(0.3), radius: 6, x: 0, y: 3)
                }
                .padding(.horizontal, 20)
            }
        }
    }
    
    @ViewBuilder
    private var videoGenerationButtonView: some View {
        if let enhancedURL = currentSticker.enhancedSupabaseImageURL, !enhancedURL.isEmpty {
            let videoStatus = currentSticker.videoGenerationStatus
            if videoStatus == .none || videoStatus == .pending || videoStatus == .processing || videoStatus == .failed {
                VideoGenerationButton(sticker: currentSticker)
                    .padding(.horizontal, 20)
            }
        }
    }
    
    @ViewBuilder
    private var videoManagementView: some View {
        if currentSticker.videoGenerationStatus == .completed,
           let videoURL = currentSticker.videoURL, !videoURL.isEmpty {
            VideoManagementView(sticker: currentSticker)
                .padding(.horizontal, 20)
                .padding(.top, 8)
        }
    }
    
    /// ÂèñÊ∂àAIÂ¢ûÂº∫
    private func cancelEnhancement() {
        ImageEnhancementService.shared.cancelEnhancement(for: currentSticker)
        isRetryingEnhancement = false
    }
    
    /// ÈáçËØïAIÂ¢ûÂº∫Ôºà‰øùÁïôÂéüÊúâÊñπÊ≥ï‰ª•ÂÖºÂÆπÔºâ
    private func retryEnhancement() {
        // ‰ΩøÁî®ÈªòËÆ§ÊèêÁ§∫ËØçÂíåÊ®°ÂûãÈáçËØïÔºå‰ΩÜ‰ΩøÁî®Áî®Êà∑ÈÄâÊã©ÁöÑÊØî‰æã
        let defaultPrompt = PromptManager.shared.getDefaultPrompt()
        triggerEnhancement(with: defaultPrompt, using: .fluxKontext, aspectRatio: selectedAspectRatio)
    }
    
    /// Â¢ûÂº∫AI
    private func enhanceWithAI(prompt: String, aspectRatio: String) async {
        guard let enhancedData = await ImageEnhancementService.shared.enhanceImage(
            for: currentSticker,
            customPrompt: prompt,
            model: .fluxKontext,
            aspectRatio: aspectRatio
        ) else {
            return
        }
        
        // ‰øùÂ≠òÂ¢ûÂº∫ÂêéÁöÑÂõæÁâáÊï∞ÊçÆ
        await MainActor.run {
            currentSticker.enhancedImageData = enhancedData
            currentSticker.isShowingEnhancedImage = true
        }
    }
    
    /// ÊâßË°åLabubuËØÜÂà´
    private func performLabubuRecognition() {
        guard let image = currentSticker.processedImage else { return }
        
        Task {
            do {
                // ‰ΩøÁî®Êñ∞ÁöÑAIËØÜÂà´ÊúçÂä°
                let result = try await LabubuAIRecognitionService.shared.recognizeUserPhoto(image)
                
                await MainActor.run {
                    if result.isSuccessful {
                        // ‰øùÂ≠òËØÜÂà´ÁªìÊûúÂà∞Ë¥¥Á∫∏
                        currentSticker.labubuInfo = convertToOldFormat(result)
                        labubuRecognitionResult = convertToOldFormat(result)
                        showingLabubuRecognition = true
                    } else {
                        // ÊòæÁ§∫Êú™ËØÜÂà´ÊèêÁ§∫
                        print("Êú™ËØÜÂà´‰∏∫LabubuÁ≥ªÂàó")
                    }
                }
            } catch {
                await MainActor.run {
                    print("Labubu AIËØÜÂà´Â§±Ë¥•: \(error)")
                    // ËøôÈáåÂèØ‰ª•ÊòæÁ§∫ÈîôËØØÊèêÁ§∫
                }
            }
        }
    }
    
    /// Â∞ÜÊñ∞ÁöÑAIËØÜÂà´ÁªìÊûúËΩ¨Êç¢‰∏∫ÊóßÊ†ºÂºèÔºà‰∏¥Êó∂ÂÖºÂÆπÊñπÊ°àÔºâ
    private func convertToOldFormat(_ aiResult: LabubuAIRecognitionResult) -> LabubuRecognitionResult? {
        // Áî±‰∫éLabubuRecognitionResultÁªìÊûÑÂ∑≤ÁÆÄÂåñÔºåËøôÈáåÂàõÂª∫‰∏Ä‰∏™ÂÖºÂÆπÁöÑÁªìÊûú
        // Âú®ÂÆûÈôÖÂ∫îÁî®‰∏≠ÔºåÂ∫îËØ•Áªü‰∏Ä‰ΩøÁî®Êñ∞ÁöÑAIËØÜÂà´ÁªìÊûúÊ†ºÂºè
        return nil
    }
    
    // Ê†ºÂºèÂåñÊó•Êúü
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "MÊúàddÊó•"
        formatter.locale = Locale(identifier: "zh_CN")
        return formatter.string(from: date)
    }
}

// MARK: - Áº©Áï•ÂõæÁªÑ‰ª∂
struct ThumbnailView: View {
    let sticker: ToySticker
    let isSelected: Bool
    
    var body: some View {
        // ÂõæÁâá - ‰ºòÂÖàÊòæÁ§∫Â¢ûÂº∫ÂõæÁâá
        Group {
            if let image = sticker.displayImage {
                Image(uiImage: image)
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .frame(width: 60, height: 60)
            } else {
                // Âä†ËΩΩÂ§±Ë¥•Êó∂ÁöÑÂç†‰ΩçÁ¨¶Ôºå‰ΩøÁî®ÂçäÈÄèÊòéÂúÜÂΩ¢ËÉåÊôØ
                Circle()
                    .fill(Color(.systemGray6))
                    .frame(width: 60, height: 60)
                    .overlay(
                        Image(systemName: "photo")
                            .font(.title3)
                            .foregroundColor(.secondary)
                    )
            }
        }
        .opacity(isSelected ? 1.0 : 0.6) // ÈÄâ‰∏≠Áä∂ÊÄÅ100%ÈÄèÊòéÂ∫¶ÔºåÊú™ÈÄâ‰∏≠60%ÈÄèÊòéÂ∫¶
        .scaleEffect(isSelected ? 1.1 : 1.0)
        .animation(.easeInOut(duration: 0.2), value: isSelected)
    }
}

// MARK: - Â§ßÂõæÂ±ïÁ§∫ÁªÑ‰ª∂
struct LargeImageView: View {
    let sticker: ToySticker
    let onTap: () -> Void
    
    var body: some View {
        // ‰ºòÂÖàÊòæÁ§∫Â¢ûÂº∫ÂõæÁâá
        if let image = sticker.displayImage {
            Image(uiImage: image)
                .resizable()
                .aspectRatio(contentMode: .fit)
                .frame(maxHeight: 320)
                .onTapGesture {
                    onTap()
                }
        } else {
            // Âä†ËΩΩÂ§±Ë¥•Êó∂ÁöÑÂç†‰ΩçÁ¨¶Ôºå‰ΩøÁî®ÂçäÈÄèÊòéËÉåÊôØ
            RoundedRectangle(cornerRadius: 20)
                .fill(Color(.systemGray6).opacity(0.3))
                .frame(height: 320)
                .overlay(
                    VStack(spacing: 12) {
                        Image(systemName: "photo")
                            .font(.system(size: 50))
                            .foregroundColor(.secondary)
                        Text("ÂõæÁâáÂä†ËΩΩÂ§±Ë¥•")
                            .font(.headline)
                            .foregroundColor(.secondary)
                    }
                )
        }
    }
}

// MARK: - Á≥ªÂàó‰ø°ÊÅØËßÜÂõæ
struct SeriesInfoView: View {
    let categoryName: String
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        NavigationView {
            ZStack {
                Color(.systemGroupedBackground)
                    .ignoresSafeArea()
                
                VStack(spacing: 30) {
                    // Âç†‰ΩçÂÜÖÂÆπ
                    VStack(spacing: 20) {
                        Image(systemName: "cube.box.fill")
                            .font(.system(size: 80))
                            .foregroundColor(.blue)
                        
                        Text("\(categoryName)Á≥ªÂàó")
                            .font(.title)
                            .fontWeight(.bold)
                        
                        Text("Á≥ªÂàó‰ø°ÊÅØÂäüËÉΩÂºÄÂèë‰∏≠...")
                            .font(.body)
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.center)
                        
                        Text("ËøôÈáåÂ∞ÜÊòæÁ§∫ËØ•ÊΩÆÁé©Á≥ªÂàóÁöÑËØ¶ÁªÜ‰ø°ÊÅØ„ÄÅÁõ∏ÂÖ≥‰∫ßÂìÅÂíåÊî∂ÈõÜËøõÂ∫¶Á≠âÂÜÖÂÆπ„ÄÇ")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.center)
                            .padding(.horizontal, 40)
                    }
                    
                    Spacer()
                }
                .padding(.top, 60)
            }
            .navigationTitle("Á≥ªÂàó‰ø°ÊÅØ")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("ÂÆåÊàê") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
            }
        }
    }
}

#Preview {
    NavigationView {
        let sampleImage = UIImage(systemName: "figure.stand") ?? UIImage()
        let sampleSticker = ToySticker(
            name: "Á§∫‰æãÊâãÂäû",
            categoryName: "ÊâãÂäû",
            originalImage: sampleImage,
            processedImage: sampleImage,
            notes: "ËøôÊòØ‰∏Ä‰∏™ÈùûÂ∏∏Á≤æÁæéÁöÑÊâãÂäûÊ®°ÂûãÔºåÂà∂‰ΩúÂ∑•Ëâ∫Á≤æËâØÔºåÈ¢úËâ≤È≤úËâ≥ÔºåÊòØÊî∂ËóèÁöÑÂ•ΩÈÄâÊã©„ÄÇ"
        )
        
        StickerDetailView(sticker: sampleSticker)
    }
} 